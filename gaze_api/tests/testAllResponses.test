#!/usr/bin/env python
'''
ROS module for Tobii Pro Glasses
Copyright 2017 Carnegie Mellon University. All Rights Reserved.
NO WARRANTY. THIS CARNEGIE MELLON UNIVERSITY AND SOFTWARE ENGINEERING INSTITUTE MATERIAL IS FURNISHED ON AN "AS-IS" BASIS. CARNEGIE MELLON UNIVERSITY MAKES NO WARRANTIES OF ANY KIND, EITHER EXPRESSED OR IMPLIED, AS TO ANY MATTER INCLUDING, BUT NOT LIMITED TO, WARRANTY OF FITNESS FOR PURPOSE OR MERCHANTABILITY, EXCLUSIVITY, OR RESULTS OBTAINED FROM USE OF THE MATERIAL. CARNEGIE MELLON UNIVERSITY DOES NOT MAKE ANY WARRANTY OF ANY KIND WITH RESPECT TO FREEDOM FROM PATENT, TRADEMARK, OR COPYRIGHT INFRINGEMENT.
Released under a BSD-style license, please see license.txt or contact permission@sei.cmu.edu for full terms.
[DISTRIBUTION STATEMENT A] This material has been approved for public release and unlimited distribution.  Please see Copyright notice for non-US Government use and distribution.
This Software includes and/or makes use of the following Third-Party Software subject to its own license.  By using this Software you agree:
1. Tobii Pro Glasses 2 API. Copyright 2017 Tobii AB (publ).
A.	You may not copy (except for backup purposes), modify, adapt, decompile, reverse engineer, disassemble, or create derivative works of the files (for example dynamic-link library files, commonly referred to as DLL-files), object code or other components of the Tobii Pro Glasses 2 API (the ?Software Components?) that are intended to be re-used in Applications for end users, and any Updates, modifications and/or patches or hot fixes thereto that Tobii may make generally available from time to time or any part thereof. 
B.	You may not redistribute or combine/bundle any part of the Software Components with other software, or distribute any software or device incorporating part of the Software Components. 
C.	You agree that Tobii AB (i) owns all legal right, title and interest in and to the Software Components, including any related intellectual property rights; and (ii) reserves all rights not expressly granted. 
D.  	You agree that You have no right to use any of Tobii's trade names, trademarks, service marks, logos, domain names, or other distinctive brand features. 
5) 	You agree that you will not remove, obscure, or alter any proprietary rights notices (including copyright and trademark notices) that may be affixed to or contained within the Software Components.
DM17-0454

'''

'''
This testing module is dedicated to verifying the gazePub.py and corresponding rosnode behavior.
We test 5 different message types--4 which are supported and 1 which is not.

We use this callback method because unittest as a Python module can't really handle the
ansync nature of this test. Instead, we have to do a workout making it difficult to assert
true the actual values of the packets, instead we let the ros system ensure it publishes a specific
message type, and log that we received that message type.
'''

import sys
import unittest
import socket
import threading
import rospy
import json
import time
import signal
import logging
from gaze.msg import Gp3, Gp, Ac, Gy, Av, Fa, Gaze

PKG = 'gaze'

# This module serves as "pretending" to be the recording unit.
GLASSES_IP = "localhost"
PORT = 49152
# keep alive messagess
KA_DATA_MSG = "{\"type\": \"live.data.unicast\", \"key\": \"some_GUID\", \"op\": \"start\"}"
KA_VIDEO_MSG = "{\"type\": \"live.video.unicast\", \"key\": \"some_other_GUID\", \"op\": \"start\"}"
running = True
timeout = 1.0

GAZE_POSITION_3D = {
    "ts" : 1114210113,
    "gp3" : [0.454, -1.149, 4.125],
    "s" : 0
}

GAZE_POSITION_2D = {
    "ts" : 1114210113,
    "gp" : [0.454, -1.149],
    "s" : 0
}

ACCELEROMETER = {
    "ts" : 1114210113,
    "ac" : [0.454, -1.149, 4.125],
    "s" : 0
}

GYROSCOPE = {
    "ts" : 1114210113,
    "gy" : [0.454, -1.149, 4.125],
    "s" : 0
}

FAKE_PACKET = {
    "ts" : 1114210113,
    "fa" : [1.0, 1.0],
    "s" : 0
}

def signal_handler(signal, frame):
    sys.exit(0)

'''
Test case to verify all published messages.
'''
class test_all_responses(unittest.TestCase):

    def __init__(self, *args):
        super(test_all_responses, self).__init__(*args)
        self.gp3success = False
        self.gpsuccess = False
        self.acsuccess = False
        self.gysuccess = False
        self.fasuccess = False

    # Method to return a socket object over localhost and using UDP
    def _make_socket(self):
        return socket.socket(socket.AF_INET, socket.SOCK_DGRAM)

    # Callback for when data is received over the gp3 topic
    def _gp3callback(self, data):
        rospy.loginfo(rospy.get_caller_id() + "I heard %s", data.vector)
        if data and data.vector:
            self.gp3success = True

    # Callback for when data is received over the gp topic
    def _gpcallback(self, data):
        rospy.loginfo(rospy.get_caller_id() + "I heard %s", data.vector)
        if data and data.vector:
            self.gpsuccess = True

    # Callback for when data is received over the ac topic
    def _accallback(self, data):
        rospy.loginfo(rospy.get_caller_id() + "I heard %s", data.vector)
        if data and data.vector:
            self.acsuccess = True

    # Callback for when data is received over the gy topic
    def _gycallback(self, data):
        rospy.loginfo(rospy.get_caller_id() + "I heard %s", data.vector)
        if data and data.vector:
            self.gysuccess = True

    # Callback for when data is received over the fa topic
    # If we see a message for this fake data packet, then the publisher messed up.
    def _facallback(self, data):
        if data and data.vector:
            self.fasuccess = True

    '''
    Method to test all the responses. Each message will follow the same test pattern:
    1. Create a subscriber for the topic
    2. Create a thread to send the specific packet
    3. Set a timeout for 10 seconds in the future
    4. Spin and wait for the global variable to change indicating message is recevied
    5. If message is received, then success!
    '''
    def test_all_responses(self):
        '''
        Some initial configuration. We use local host and pretend this module is the recording unit.
        '''
        peer = ("localhost", PORT)
        serversocket = self._make_socket()
        signal.signal(signal.SIGINT, signal_handler)
        rospy.init_node('testResponses', anonymous=True)

        # Create a subscriber for each topic type and link their corresponding callbacks
        rospy.Subscriber("gazegp3", Gaze, self._gp3callback)
        rospy.Subscriber("gazegp", Gaze, self._gpcallback)
        rospy.Subscriber("gazeac", Gaze, self._accallback)
        rospy.Subscriber("gazegy", Gaze, self._gycallback)
        rospy.Subscriber("gazefa", Gaze, self._facallback)

        # Create thread for sending packets
        gp3thread = threading.Thread(target=send_packet_in_background, args=(serversocket, GAZE_POSITION_3D, peer, ))
        gp3thread.daemon = True
        gp3thread.start()

        # Set a timeout for 10 seconds in the future
        timeout_t = time.time() + 10.0
        # Wait for the timeout or if message is received
        while not rospy.is_shutdown() and not self.gp3success and time.time() < timeout_t:
            time.sleep(0.1)
        self.assert_(self.gp3success, msg="Received gp3 packet")

        # Create thread for sending packets
        gpthread = threading.Thread(target=send_packet_in_background, args=(serversocket, GAZE_POSITION_2D, peer, ))
        gpthread.daemon = True
        gpthread.start()

        # Set a timeout for 10 seconds in the future
        timeout_t = time.time() + 10.0
        # Wait for the timeout or if message is received
        while not rospy.is_shutdown() and not self.gpsuccess and time.time() < timeout_t:
            time.sleep(0.1)
        self.assert_(self.gpsuccess, msg="Received gp packet")

        # Create thread for sending packets
        acthread = threading.Thread(target=send_packet_in_background, args=(serversocket, ACCELEROMETER, peer, ))
        acthread.daemon = True
        acthread.start()

        # Set a timeout for 10 seconds in the future
        timeout_t = time.time() + 10.0
        # Wait for the timeout or if message is received
        while not rospy.is_shutdown() and not self.acsuccess and time.time() < timeout_t:
            time.sleep(0.1)
        self.assert_(self.acsuccess, msg="Received ac packet")

        # Create thread for sending packets
        gythread = threading.Thread(target=send_packet_in_background, args=(serversocket, GYROSCOPE, peer, ))
        gythread.daemon = True
        gythread.start()

        # Set a timeout for 10 seconds in the future
        timeout_t = time.time() + 10.0
        # Wait for the timeout or if message is received
        while not rospy.is_shutdown() and not self.gysuccess and time.time() < timeout_t:
            time.sleep(0.1)
        self.assert_(self.gysuccess, msg="Received gy packet")

        # Create thread for sending packets
        fathread = threading.Thread(target=send_packet_in_background, args=(serversocket, FAKE_PACKET, peer, ))
        fathread.daemon = True
        fathread.start()

        # Set a timeout for 10 seconds in the future
        timeout_t = time.time() + 10.0
        # Wait for the timeout or if message is received
        while not rospy.is_shutdown() and not self.fasuccess and time.time() < timeout_t:
            time.sleep(0.1)
        self.assertFalse(self.fasuccess, msg="Did not received fa packet as expected")

        return

'''
Method to pack the python object into a JSON object and send it to the connected peer every second.s
'''
def send_packet_in_background(sock, pkt, peer):
    while True:
        sock.sendto(json.dumps(pkt), peer)
        time.sleep(1.0)


if __name__ == "__main__":
    import rostest
    rostest.rosrun(PKG, 'test_all_responses', test_all_responses)
    #test = test_all_responses()
    #test.test_all_responses()
