#!/usr/bin/env python
'''
ROS module for Tobii Pro Glasses
Copyright 2017 Carnegie Mellon University. All Rights Reserved.
NO WARRANTY. THIS CARNEGIE MELLON UNIVERSITY AND SOFTWARE ENGINEERING INSTITUTE MATERIAL IS FURNISHED ON AN "AS-IS" BASIS. CARNEGIE MELLON UNIVERSITY MAKES NO WARRANTIES OF ANY KIND, EITHER EXPRESSED OR IMPLIED, AS TO ANY MATTER INCLUDING, BUT NOT LIMITED TO, WARRANTY OF FITNESS FOR PURPOSE OR MERCHANTABILITY, EXCLUSIVITY, OR RESULTS OBTAINED FROM USE OF THE MATERIAL. CARNEGIE MELLON UNIVERSITY DOES NOT MAKE ANY WARRANTY OF ANY KIND WITH RESPECT TO FREEDOM FROM PATENT, TRADEMARK, OR COPYRIGHT INFRINGEMENT.
Released under a BSD-style license, please see license.txt or contact permission@sei.cmu.edu for full terms.
[DISTRIBUTION STATEMENT A] This material has been approved for public release and unlimited distribution.  Please see Copyright notice for non-US Government use and distribution.
This Software includes and/or makes use of the following Third-Party Software subject to its own license.  By using this Software you agree:
1. Tobii Pro Glasses 2 API. Copyright 2017 Tobii AB (publ).
A.	You may not copy (except for backup purposes), modify, adapt, decompile, reverse engineer, disassemble, or create derivative works of the files (for example dynamic-link library files, commonly referred to as DLL-files), object code or other components of the Tobii Pro Glasses 2 API (the ?Software Components?) that are intended to be re-used in Applications for end users, and any Updates, modifications and/or patches or hot fixes thereto that Tobii may make generally available from time to time or any part thereof. 
B.	You may not redistribute or combine/bundle any part of the Software Components with other software, or distribute any software or device incorporating part of the Software Components. 
C.	You agree that Tobii AB (i) owns all legal right, title and interest in and to the Software Components, including any related intellectual property rights; and (ii) reserves all rights not expressly granted. 
D.  	You agree that You have no right to use any of Tobii's trade names, trademarks, service marks, logos, domain names, or other distinctive brand features. 
5) 	You agree that you will not remove, obscure, or alter any proprietary rights notices (including copyright and trademark notices) that may be affixed to or contained within the Software Components.
DM17-0454

'''

'''
This testing modle is dedicated to verifying the IP, Port, and Keep-alive
behavior of the recording unit.

The format of these tests is to send the keep-alive message and test the response
by checking it against the address sent through the socket. Additionally, checking that
there is data in the response, meaning the recording unit is sending live stream data.
Note: Both data, and video keep alive messages are required to be sent to receive any livestream data at all.
'''

import sys
import unittest
import socket
import threading
import rospy
import time

PKG = 'gaze'
GLASSES_IP = "fe80::76fe:48ff:fe30:7a9f"
PORT = 49152
# keep alive messagess
KA_DATA_MSG = "{\"type\": \"live.data.unicast\", \"key\": \"some_GUID\", \"op\": \"start\"}"
KA_VIDEO_MSG = "{\"type\": \"live.video.unicast\", \"key\": \"some_other_GUID\", \"op\": \"start\"}"
running = True
timeout = 1.0

'''
The test case which checks the glasses/recording unit's IP and port, as well as the keep alive
behavior expected.
'''
class test_glasses_ip_port_and_keepalive(unittest.TestCase):

    # Method to create and return a socket in the IPv6 range following the UDP protocol
    def _make_socket(self):
        return socket.socket(socket.AF_INET6, socket.SOCK_DGRAM)

    # Method to send a given keep alive message in the background
    def _send_keepalive_msg(self, socket, msg, peer):
        while running:
            socket.sendto(str.encode(msg), peer)
            time.sleep(timeout)

    def _signal_handler(self, signal, frame):
        stop_sending_msg()
        sys.exit(0)

    def _stop_sending_msg(self):
        global running
        running = False

    # Method to test the ip and port, as well as the keep alive behavior
    def test_glasses_ip_port_and_keepalive(self):
        # The peer tuple specifying the IP and port to open a socket on
        peer = (GLASSES_IP, PORT)

        # The socket to receive the data stream (JSON objects)
        data_socket = self._make_socket()
        td = threading.Timer(0, self._send_keepalive_msg, [data_socket, KA_DATA_MSG, peer])
        td.start()

        # The socket to receive the data stream (MPEG-TS)
        video_socket = self._make_socket()
        tv = threading.Timer(0, self._send_keepalive_msg, [video_socket, KA_VIDEO_MSG, peer])
        tv.start()

        # Continually receive data from the data socket
        while not rospy.is_shutdown():
            # data is the JSON object, address is the sender's address which we use to verify
            data, address = data_socket.recvfrom(2048)
            if data and address:
                self.assertTrue(data, msg="Testing if we received data from: {} {}".format(GLASSES_IP, PORT))
                # The address is in the form of a tuple, with the IP as the first item with "IPv6" appended on the end.
                self.assertEqual(address[0][:-5], GLASSES_IP, msg="Testing for correct IP address")
                self._stop_sending_msg()
                return

if __name__ == "__main__":
    import rostest
    rostest.rosrun(PKG, 'test_glasses_ip_port_and_keepalive', test_glasses_ip_port_and_keepalive)
